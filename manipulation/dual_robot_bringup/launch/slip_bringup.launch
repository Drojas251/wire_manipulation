<launch>
  <!-- By default, record arm trajectories and export to JSON file -->
  <arg name="use_json" default="true"/>

  <!-- Launch Vision-->
  <!-- Rear Mounted Camera -->
  <include file="$(find realsense2_camera)/launch/rs_camera.launch" ns="mounted_cam">
    <arg name="filters"                        value="pointcloud"/>
    <arg name="align_depth"                    value="true"/>
    <arg name="serial_no"                      value="109122071019"/>
  </include>
  <!-- Arm Mounted Camera -->
  <include file="$(find realsense2_camera)/launch/rs_camera.launch" ns="arm_cam">
    <arg name="serial_no"                      value="151322067775"/>
  </include>

  <!--Nodes involved with ArUco marker and coordinate monitoring-->
  <node pkg="vision" type="arm_camera_link.py" name="arm_camera_link" output="screen" /> 
  
  <!-- ARUCO TRACKING -->
  <!-- <node pkg="vision" type="arm_aruco_tracker.py" name="arm_aruco_tracker" output="screen" /> 
  <node pkg="vision" type="mounted_aruco_tracker.py" name="mounted_aruco_tracker" output="screen" />
  Aruco Marker Rotation Transforms
  <node pkg="vision" type="aruco_rotation_transform.py" name="aruco_rotation_transform" output="screen"/> -->

  <!-- Nodes involved in ArUco marker search -->
  <!-- <node pkg="vision" type="environment_grid.py" name="environment_grid" output="screen" />  -->
  <!-- <node pkg="vision" type="search_target.py" name="search_target" output="screen" />  -->
  
  <!-- SLIP DETECTION WITH ARUCOS -->
  <!-- <node pkg="vision" type="slip_detect.py" name="left_slip_detect" output="screen" clear_params="true"/> -->
  <!-- <node pkg="vision" type="slip_detect.py" name="right_slip_detect" output="screen" clear_params="true"/> -->

  <!-- Point Cloud Classification -->
  <node pkg="vision" type="rgbd_segmentation.py" name="rgbd_segmentation" output="screen"/> 

  <!-- ML TRACKING -->
  <node pkg="vision" type="mounted_ml_tracker.py" name="mounted_ml_tracker" output="screen"/> 

  <!-- Nodelet manager for depth PC processing -->
  <node pkg="nodelet" type="nodelet" name="nodelet_manager" args="manager" />
  <!-- Segmenting no rgb -->
  <!-- <node pkg="nodelet" type="nodelet" name="nodelet1"
    args="load depth_image_proc/point_cloud_xyz nodelet_manager">
    <remap from="camera_info" to="/seg_depth/camera_info"/>
    <remap from="image_rect" to="/seg_depth/image_raw"/>
    <remap from="points" to="/rscamera/depth/points"/>
  </node> -->
  
  <!-- No rgb -->
  <!-- <node pkg="nodelet" type="nodelet" name="nodelet1"
    args="load depth_image_proc/point_cloud_xyz nodelet_manager">
    <remap from="camera_info" to="/mounted_cam/camera/aligned_depth_to_color/camera_info"/>
    <remap from="image_rect" to="/mounted_cam/camera/aligned_depth_to_color/image_raw"/>
    <remap from="points" to="/rscamera/depth/points"/>
  </node> -->

  <!-- rgb and depth:
      - nodelet1 responsible for segmenting and publishing a depth image of only the connector end
      - nodelet2 responsible for taking the depth image form nodelet1 "seg_depth/image_raw" and converting to PC2 for processing
  -->
  <node pkg="nodelet" type="nodelet" name="nodelet1"
    args="load depth_image_proc/point_cloud_xyzrgb nodelet_manager">
    <remap from="rgb/camera_info" to="/mounted_cam/camera/color/camera_info"/>
    <remap from="rgb/image_rect_color" to="/mounted_cam/camera/color/image_raw"/>
    <remap from="depth_registered/image_rect" to="/mounted_cam/camera/aligned_depth_to_color/image_raw"/>

    <remap from="depth_registered/points" to="/rscamera/depth/points"/>
  </node>
  
  <node pkg="nodelet" type="nodelet" name="nodelet2"
    args="load depth_image_proc/point_cloud_xyz nodelet_manager">
    <remap from="camera_info" to="/mounted_cam/camera/aligned_depth_to_color/camera_info"/>
    <remap from="image_rect" to="/seg_depth/image_raw"/>

    <remap from="points" to="/rscamera/depth_image/points"/>
  </node>

  <!--Camera Transform-->
  <node pkg="tf2_ros" type="static_transform_publisher" name="camera_broadcaster" args="-0.3556 0.0 0.4064 0 0 0 1 world camera_link" />

  <!-- Launch real robots -->
  <!-- <include file="$(find wire_manipulation_moveit_config)/launch/wire_manipulation_moveit.launch"> </include> -->
  <!-- Launch demo robots -->
  <include file="$(find wire_manipulation_moveit_config)/launch/demo.launch"> </include>

  <!--Dual Robot control service-->
  <node pkg="dual_robot_control" type="robot_services.py" name="robot_services" output="screen" />

</launch>
